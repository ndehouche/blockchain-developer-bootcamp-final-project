const PasswordManager = artifacts.require("PasswordManager");


contract('PasswordManager', ([ownerAccount, client1, client2]) => {
    let passwordManager;
    const domain1 = "0x646f6d61696e3100000000000000000000000000000000000000000000000000";
    const username1 = "0x757365726e616d65310000000000000000000000000000000000000000000000";
    const password1 = "0x70617373776f7264310000000000000000000000000000000000000000000000";
    const domain2 = "0x646f6d61696e3200000000000000000000000000000000000000000000000000";
    const username2 = "0x757365726e616d65320000000000000000000000000000000000000000000000";
    const password2 = "0x70617373776f7264320000000000000000000000000000000000000000000000";
    

    before(async () => {
        passwordManager = await PasswordManager.new()
        
    })


    describe('Variables', async () => {
        // This test checks if the contract has an owner. Since the contract inherits from Ownable (OpenZeppelin), owner is automatically generated.
        // A getter function (owner()) is also generated. The test checks that such a function is present. The test should pass.
        it("should have an owner", async () => {
            assert.equal(typeof passwordManager.owner, 'function', "the contract has no owner.");
          });
        // This test checks if the owner if the contract is the address that deployed the contract.
        // The test should pass.
        it('owner is deployer of contract (account[0])', async () => {
            const owner = await passwordManager.owner()
            assert.equal(owner, ownerAccount, 'The deployer is not the owner.')
        } );
        // This test checks if there is a function (balance()). This is autogenerated if there is a public variable named (balance).
        // The test should pass.
        it("should have a balance", async () => {
            assert.equal(typeof passwordManager.balance, 'function', "the contract has no balance.");
          });

        
    })

    // Testing - may delete
    describe('Passwords mapping', async () => {

    })



    describe('saveNewPassword function', async () => {
        // This test checks if users can save new passwords. If a password is saved, result will be true and the domain of the password struct retrieved will equal domain1.
        // The test should pass.
        it("should allow users to store new passwords to password list", async () => {
            
    //         const result = await passwordManager.saveNewPassword(domain1, username1, password1, {from: client1
    //  });
    //         const result2 = await passwordManager.saveNewPassword(domain2, username2, password2, {from: client1
    //  });
    //         const passwordList =  await passwordManager.getPasswordList({ from: client1
    //  });
    const result = await passwordManager.saveNewPassword(domain1, username1, password1, {from: ownerAccount
    });
           const result2 = await passwordManager.saveNewPassword(domain2, username2, password2, {from: ownerAccount
    });
           const passwordList =  await passwordManager.getPasswordList({ from: ownerAccount
    });

            
            assert(result,
            "Users cannot save passwords.",
            );

            console.log(passwordList)
            console.log(passwordList[0].domain)
        
    //         assert.equal(passwordList[0],
    //             // [{domain1, username1, password1}],
    //             [{domain: '0',
    // username: '0x757365726e616d65310000000000000000000000000000000000000000000000',
    // password: '0x70617373776f7264310000000000000000000000000000000000000000000000'}],
    //             "Passwords are not stored in a list",
    //           );
              assert.equal(passwordList[0].domain,
                domain1,
                "Passwords are not stored in a list",
              );
        })
    })

    describe('deletePassword function', async () => {
        // This test checks that the length of the passwords array is equal to the number of passwords saved. The test saves two passwords and checks that the password list contains two passwords.
        // The test should pass.
        it("should allow users to delete passwords saved.", async () => {
            const result = await passwordManager.deletePassword(1, {from: ownerAccount});
    //         const result2 = await passwordManager.deletePassword(0, {from: client1
    //  });
            const passwordList = await passwordManager.getPasswordList({ from: ownerAccount});

        assert.equal(
            passwordList.length,
            // "There are no passwords to retrieve!",
            1,
            "Passwords could not be deleted.",
          );
        })
    })

    describe('getPasswordList function', async () => {
        // This test checks that the length of the passwords array is equal to the number of passwords saved. The test saves two passwords and checks that the password list contains two passwords.
        // The test should pass.
        it("Password List length should equal number of passwords saved.", async () => {
            const result = await passwordManager.saveNewPassword(domain1, username1, password1, {from: ownerAccount
     });
            const result2 = await passwordManager.saveNewPassword(domain2, username2, password2, {from: ownerAccount
     });
            const passwordList = await passwordManager.getPasswordList({ from: ownerAccount
     });

        assert.equal(
            passwordList.length,
            // "There are no passwords to retrieve!",
            // 2,
            3,
            "Password List length not the same as number of passwords saved by user.",
          );
        })
        // This test checks that each user has access only to their password list. The test saves one password for client 2 and checks that their password list contains 1 password (not 2 passwords).
        // The test should pass.
        it("Each user should only have access to their password list.", async () => {
            const result = await passwordManager.saveNewPassword(domain1, username1, password1, {from: client2 });
            // const result2 = await passwordManager.saveNewPassword(domain2, username2, password2, {from: client2 });
            const passwordList = await passwordManager.getPasswordList({ from: client2 });

        assert.equal(
            passwordList.length,
            // "There are no passwords to retrieve!",
            1,
            "Password List length not the same as number of passwords saved bu user.",
          );
        })
    })

    describe('updatePassword function', async () => {

    });

    describe('deletePassword function', async () => {

    });

    describe('updatePassword function', async () => {

    });

    describe('withdraw function', async () => {

    });
})
  